---
import type {
	BuiltinLanguage,
	BuiltinTheme,
	LanguageRegistration,
	SpecialLanguage,
	ThemeRegistration,
	ThemeRegistrationRaw,
} from 'shikiji';
import { visit } from 'unist-util-visit';
import { getCachedHighlighter, replaceCssVariables } from '../dist/core/shiki.js';

interface Props {
	/** The code to highlight. Required. */
	code: string;
	/**
	 * The language of your code.
	 * Supports all languages listed here: https://github.com/shikijs/shiki/blob/main/docs/languages.md#all-languages
	 * Instructions for loading a custom language: https://github.com/shikijs/shiki/blob/main/docs/languages.md#supporting-your-own-languages-with-shiki
	 *
	 * @default "plaintext"
	 */
	lang?: BuiltinLanguage | SpecialLanguage | LanguageRegistration;
	/**
	 * The styling theme.
	 * Supports all themes listed here: https://github.com/shikijs/shiki/blob/main/docs/themes.md#all-themes
	 * Instructions for loading a custom theme: https://github.com/shikijs/shiki/blob/main/docs/themes.md#loading-theme
	 *
	 * @default "github-dark"
	 */
	theme?: BuiltinTheme | ThemeRegistration | ThemeRegistrationRaw;
	/**
	 * Enable word wrapping.
	 *  - true: enabled.
	 *  - false: disabled.
	 *  - null: All overflow styling removed. Code will overflow the element by default.
	 *
	 * @default false
	 */
	wrap?: boolean | null;
	/**
	 * Generate inline code element only, without the pre element wrapper.
	 *
	 * @default false
	 */
	inline?: boolean;
}

const {
	code,
	lang = 'plaintext',
	theme = 'github-dark',
	wrap = false,
	inline = false,
} = Astro.props;

// shiki -> shikiji compat
if (typeof lang === 'object') {
	// `id` renamed to `name
	if ((lang as any).id && !lang.name) {
		lang.name = (lang as any).id;
	}
	// `grammar` flattened to lang itself
	if ((lang as any).grammar) {
		Object.assign(lang, (lang as any).grammar);
	}
}

const highlighter = await getCachedHighlighter({
	langs: [lang],
	themes: [theme],
});

const html = highlighter.codeToHtml(code, {
	lang: typeof lang === 'string' ? lang : lang.name,
	theme,
	transforms: {
		pre(node) {
			// Swap to `code` tag if inline
			if (inline) {
				node.tagName = 'code';
			}

			// Cast to string as shikiji will always pass them as strings instead of any other types
			const classValue = (node.properties.class as string) ?? '';
			const styleValue = (node.properties.style as string) ?? '';

			// Replace "shiki" class naming with "astro-code"
			node.properties.class = classValue.replace(/shiki/g, 'astro-code');

			// Handle code wrapping
			// if wrap=null, do nothing.
			if (wrap === false) {
				node.properties.style = styleValue + '; overflow-x: auto;';
			} else if (wrap === true) {
				node.properties.style =
					styleValue + '; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;';
			}
		},
		code(node) {
			if (inline) {
				return node.children[0] as typeof node;
			}
		},
		root(node) {
			// theme.id for shiki -> shikiji compat
			const themeName = typeof theme === 'string' ? theme : theme.name;
			if (themeName === 'css-variables') {
				// Replace special color tokens to CSS variables
				visit(node as any, 'element', (child) => {
					if (child.properties?.style) {
						child.properties.style = replaceCssVariables(child.properties.style);
					}
				});
			}
		},
	},
});
---

<Fragment set:html={html} />
